Directory structure:
└── cesarvenzac-todo-app/
    ├── .env.example
    ├── documentation/
    │   ├── structure.md
    │   ├── plan.md
    │   ├── description.md
    │   ├── features.md
    │   └── context.txt
    ├── backend/
    │   ├── controllers/
    │   │   ├── authController.js
    │   │   └── taskController.js
    │   ├── services/
    │   │   ├── taskService.js
    │   │   └── authService.js
    │   ├── middlewares/
    │   │   └── authMiddleware.js
    │   ├── package.json
    │   ├── uploads/
    │   │   ├── 9fc41cd438003a8d1a0f4189d1051a8d
    │   │   ├── d8b03533e29a9c8c6ddd571d67ca9682
    │   │   ├── 3a72f129f232b61d1c32c93f59870223
    │   │   └── b5d16e3faf5b23736b61e607d3ee1214
    │   ├── routes/
    │   │   ├── taskRoutes.js
    │   │   └── authRoutes.js
    │   ├── Dockerfile
    │   └── index.js
    ├── frontend/
    │   ├── .vscode/
    │   │   ├── tasks.json
    │   │   ├── launch.json
    │   │   └── extensions.json
    │   ├── .gitignore
    │   ├── tsconfig.app.json
    │   ├── package.json
    │   ├── tsconfig.spec.json
    │   ├── .dockerignore
    │   ├── Dockerfile
    │   ├── tsconfig.json
    │   ├── package-lock.json
    │   ├── README.md
    │   ├── src/
    │   │   ├── index.html
    │   │   ├── styles.css
    │   │   ├── assets/
    │   │   │   ├── fonts/
    │   │   │   │   └── departure-mono/
    │   │   │   │       ├── DepartureMono-Regular.woff2
    │   │   │   │       ├── DepartureMono-Regular.otf
    │   │   │   │       └── DepartureMono-Regular.woff
    │   │   │   ├── .gitkeep
    │   │   │   └── favicons/
    │   │   ├── main.ts
    │   │   └── app/
    │   │       ├── app.routes.ts
    │   │       ├── app.config.ts
    │   │       ├── services/
    │   │       │   └── auth.service.ts
    │   │       ├── app.component.spec.ts
    │   │       ├── components/
    │   │       │   ├── card/
    │   │       │   │   ├── card.component.spec.ts
    │   │       │   │   ├── card.component.html
    │   │       │   │   ├── card.component.ts
    │   │       │   │   └── card.component.css
    │   │       │   ├── login/
    │   │       │   │   ├── login.component.html
    │   │       │   │   ├── login.component.css
    │   │       │   │   └── login.component.ts
    │   │       │   ├── tasks/
    │   │       │   │   ├── tasks.component.ts
    │   │       │   │   ├── tasks.component.css
    │   │       │   │   └── tasks.component.html
    │   │       │   ├── task-modal/
    │   │       │   │   ├── task-modal.component.css
    │   │       │   │   ├── task-modal.component.html
    │   │       │   │   └── task-modal.component.ts
    │   │       │   └── register/
    │   │       │       ├── register.component.html
    │   │       │       ├── register.component.ts
    │   │       │       └── register.component.css
    │   │       ├── app.component.css
    │   │       ├── pipes/
    │   │       │   └── filter.pipe.ts
    │   │       ├── interceptors/
    │   │       │   └── auth.interceptor.ts
    │   │       ├── guards/
    │   │       │   └── auth.guard.ts
    │   │       ├── app.component.ts
    │   │       └── app.component.html
    │   ├── .editorconfig
    │   └── angular.json
    ├── .dockerignore
    ├── README.md
    └── docker-compose.yml

================================================
File: /README.md
================================================
# Todo List Application

A modern task management application built with Express.js, Angular, and MongoDB, designed for efficient task organization and team collaboration.

![Node](https://img.shields.io/badge/node-%3E%3D14.0.0-brightgreen)
![Angular](https://img.shields.io/badge/angular-17-red)

## Features

### Authentication System

- **Secure User Management**
  - User registration with personal information
  - Avatar upload capability
  - Newsletter subscription option
  - Terms consent handling
  - JWT-based authentication
  - Protected routes and secure endpoints

### Task Management

- **Comprehensive Task Control**
  - Create, edit, and delete tasks
  - Rich task descriptions
  - Status tracking (To Start, In Progress, Completed)
  - Priority levels (Low, Medium, High)
  - Due dates management
  - Categories and tags support
  - Drag-and-drop task organization
  - Detailed task modal view

### Coming Soon

- **Team Collaboration**

  - Team creation and management
  - User invitations system
  - Role-based permissions
  - Shared task lists

- **Project Management**

  - Project creation and assignment
  - Progress tracking
  - Multi-project support

- **Enhanced Task Features**
  - File attachments
  - Task comments
  - Task sharing
  - Notification system

## Tech Stack

### Backend

- Express.js
- MongoDB
- JWT Authentication
- Multer for file uploads
- bcrypt for security

### Frontend

- Angular 17
- Angular Router
- HttpClient
- Custom CSS with Variables
- Angular CDK for Drag & Drop

### Infrastructure

- Docker & Docker Compose
- RESTful API architecture
- Microservices design

## Getting Started

### Prerequisites

- Docker and Docker Compose
- Node.js ≥ 14
- npm or yarn

### Installation

1. Clone the repository

```bash
git clone https://github.com/yourusername/todo-list-app.git
cd todo-list-app
```

2. Set up environment variables

```bash
cp .env.example .env
```

3. Launch with Docker

```bash
docker-compose up --build
```

### Development Mode

```bash
npm install
npm run dev
```

### Testing

```bash
npm run test
```

## Documentation

Detailed documentation is available in the `/documentation` directory:

- [Technical Description](documentation/description.md)
- [Feature List](documentation/features.md)
- [Architecture Overview](documentation/structure.md)
- [Development Plan](documentation/plan.md)

## Contributing

Contributions are welcome! Please read our [Contributing Guidelines](CONTRIBUTING.md) before submitting pull requests.

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## Support

For support, please open an issue in the GitHub repository or contact the maintainers.


================================================
File: /.env.example
================================================
# Application
NODE_ENV=development
PORT=5038
MONGODB_URI=mongodb://your-mongodb-uri
DATABASE_NAME=todo_app

# Authentication
JWT_SECRET=your-secret-key
JWT_EXPIRATION=24h

# CORS
CORS_ORIGIN=http://localhost:4200

# File Upload
UPLOAD_DIR=uploads
MAX_FILE_SIZE=5242880
ALLOWED_FILE_TYPES=image/jpeg,image/png,image/gif

# Logging
LOG_LEVEL=debug
LOG_FILE_PATH=logs/app.log 

================================================
File: /documentation/structure.md
================================================
# Project Structure

## Directory Organization

```
cesarvenzac-todo-app/
├── backend/                 # Express.js backend
│   ├── controllers/        # Request handlers
│   ├── services/          # Business logic
│   ├── middlewares/       # Custom middlewares
│   ├── routes/            # API routes
│   └── uploads/           # File storage
└── frontend/              # Angular frontend
    └── src/
        ├── app/
        │   ├── components/    # UI components
        │   ├── services/      # Data services
        │   ├── guards/        # Route protection
        │   ├── interceptors/  # HTTP interceptors
        │   └── pipes/         # Data transformation
```

## Key Components

### Backend Components
1. **Controllers**
   - `authController.js`: Handles authentication requests
   - `taskController.js`: Manages task operations

2. **Services**
   - `authService.js`: Authentication business logic
   - `taskService.js`: Task management logic

3. **Middlewares**
   - `authMiddleware.js`: JWT validation

### Frontend Components
1. **Core Components**
   - `AppComponent`: Application shell
   - `CardComponent`: Task card display
   - `TasksComponent`: Task management
   - `LoginComponent`: User authentication
   - `RegisterComponent`: User registration

2. **Services**
   - `AuthService`: Authentication state management
   - `AuthGuard`: Route protection
   - `AuthInterceptor`: Token injection

3. **Utilities**
   - `FilterPipe`: Task filtering

================================================
File: /documentation/plan.md
================================================
# Development Plan

## Phase 1: Core Features [COMPLETED]

- [x] Basic authentication system
  - [x] User registration with email/password
  - [x] Personal information collection
  - [x] Avatar upload
  - [x] Newsletter subscription
  - [x] Terms consent
- [x] JWT-based authentication
- [x] Protected routes
- [x] Task CRUD operations
- [x] Task status management
- [x] Priority management
- [x] Basic UI implementation

## Phase 2: Enhanced Task Management [COMPLETED]

- [x] Create new tasks
- [x] Edit existing tasks
- [x] Delete tasks
- [x] Task description
- [x] Task status tracking (to start, in progress, completed)
- [x] Task priority levels (low, medium, high)
- [x] Task due dates
- [x] Task categories
- [x] Task tags
- [x] Task details modal
- [x] Drag and drop tasks between lists

## Phase 3: Team Features [PLANNED]

- [ ] Team creation and management
- [ ] User invitations
- [ ] Team member roles and permissions
- [ ] Shared task lists
- [ ] Multiple team support

## Phase 4: Project Management [PLANNED]

- [ ] Project creation
- [ ] Project assignment
- [ ] Project progress tracking
- [ ] Multiple project support

## Phase 5: Advanced Features [PLANNED]

- [ ] Task file attachments
- [ ] Task comments
- [ ] Task sharing
- [ ] Task notifications

## Phase 6: Optimization [PLANNED]

- [ ] Performance improvements
- [ ] Mobile optimization
- [ ] Offline support
- [ ] Data backup system


================================================
File: /documentation/description.md
================================================
# Todo List Application

## Overview

A modern task management application built with Express.js, Angular, and MongoDB. The application provides a secure and intuitive interface for managing personal and team tasks.

## Technical Stack

### Backend

- **Framework**: Express.js
- **Database**: MongoDB
- **Authentication**: JWT (JSON Web Tokens)
- **File Upload**: Multer
- **Security**: bcrypt for password hashing

### Frontend

- **Framework**: Angular 17
- **State Management**: Built-in Angular services
- **HTTP Client**: Angular HttpClient
- **Routing**: Angular Router
- **Styling**: Custom CSS with CSS Variables

## Architecture

The application follows a microservices architecture with:

- Separate frontend and backend containers
- RESTful API design
- Token-based authentication
- Component-based frontend architecture


================================================
File: /documentation/features.md
================================================
# Features

## Current Features

### Authentication

- [x] User registration with:
  - Email and password
  - Personal information (name, phone, birthdate)
  - Avatar upload
  - Newsletter subscription option
  - Terms consent
- [x] Secure login system
- [x] JWT-based authentication
- [x] Protected routes

### Task Management

- [x] Create new tasks
- [x] Edit existing tasks
- [x] Delete tasks
- [x] Task description
- [x] Task status tracking (to start, in progress, completed)
- [x] Task priority levels (low, medium, high)
- [x] Task due dates
- [x] Task categories
- [x] Task tags
- [x] Task details modal
- [x] Drag and drop tasks between lists

## Planned Features

### Team Collaboration

- [ ] Team creation and management
- [ ] User invitations
- [ ] Team member roles and permissions
- [ ] Shared task lists
- [ ] Multiple team support

### Project Management

- [ ] Project creation
- [ ] Project assignment
- [ ] Project progress tracking
- [ ] Multiple project support

### Enhanced Task Features

- [ ] Task file attachments
- [ ] Task comments
- [ ] Task sharing
- [ ] Task notifications


================================================
File: /backend/controllers/authController.js
================================================
const { registerUser, loginUser } = require("../services/authService");

async function register(req, res, database) {
  try {
    const { email, password, firstname, lastname, phone, birthdate, allowNewsletter, consent } =
      req.body;
    const avatarPath = req.file ? req.file.path : null;
    console.log("Registering user with email:", email);
    const result = await registerUser(
      email,
      password,
      firstname,
      lastname,
      phone,
      birthdate,
      allowNewsletter,
      consent,
      avatarPath,
      database
    );
    res.status(201).json(result);
  } catch (error) {
    console.error("Error during registration:", error);
    res.status(error.status || 500).json({ error: error.message });
  }
}

async function login(req, res, database) {
  try {
    const { email, password } = req.body;
    console.log("Logging in user with email:", email);
    const result = await loginUser(email, password, database);
    res.json(result);
  } catch (error) {
    console.error("Error during login:", error);
    res.status(error.status || 500).json({ error: error.message });
  }
}

module.exports = { register, login };


================================================
File: /backend/controllers/taskController.js
================================================
const { getAllTasks, createTask, modifyTask, removeTask } = require("../services/taskService");

async function getTasks(req, res, database) {
  try {
    const tasks = await getAllTasks(req.user.userId, database);
    res.json(tasks);
  } catch (error) {
    res.status(500).json({ error: "Internal server error" });
  }
}

async function addTask(req, res, database) {
  try {
    const { name, description, status, priority, dueDate, categories, tags } = req.body;
    const result = await createTask(
      req.user.userId,
      name,
      description,
      status,
      priority,
      dueDate ? new Date(dueDate) : null,
      categories,
      tags,
      database
    );
    res.json(result);
  } catch (error) {
    res.status(500).json({ error: "Internal server error" });
  }
}

async function updateTask(req, res, database) {
  try {
    const { name, description, status, priority, dueDate, categories, tags } = req.body;
    const result = await modifyTask(
      req.user.userId,
      req.params._id,
      name,
      description,
      status,
      priority,
      dueDate ? new Date(dueDate) : undefined,
      categories,
      tags,
      database
    );
    res.json(result);
  } catch (error) {
    res.status(500).json({ error: "Internal server error" });
  }
}

async function deleteTask(req, res, database) {
  try {
    const result = await removeTask(req.user.userId, req.params._id, database);
    res.json(result);
  } catch (error) {
    res.status(500).json({ error: "Internal server error" });
  }
}

module.exports = { getTasks, addTask, updateTask, deleteTask };


================================================
File: /backend/services/taskService.js
================================================
const { ObjectId } = require("mongodb");

async function getAllTasks(userId, database) {
  return await database.collection("tasks").find({ userId }).toArray();
}

async function createTask(
  userId,
  name,
  description = "",
  status = "to start",
  priority = "medium",
  dueDate = null,
  categories = [],
  tags = [],
  database
) {
  if (!name) {
    throw { status: 400, message: "Task name is required" };
  }

  const result = await database.collection("tasks").insertOne({
    name,
    description,
    status,
    priority,
    dueDate,
    categories,
    tags,
    userId,
    createdAt: new Date(),
    updatedAt: new Date(),
  });
  return { message: "Task added successfully", taskId: result.insertedId };
}

async function modifyTask(
  userId,
  taskId,
  name,
  description,
  status,
  priority,
  dueDate,
  categories,
  tags,
  database
) {
  const validStatuses = ["to start", "in progress", "completed"];
  if (status && !validStatuses.includes(status)) {
    throw { status: 400, message: "Invalid status" };
  }

  const validPriorities = ["low", "medium", "high"];
  if (priority && !validPriorities.includes(priority)) {
    throw { status: 400, message: "Invalid priority" };
  }

  const result = await database.collection("tasks").updateOne(
    {
      _id: new ObjectId(taskId),
      userId,
    },
    {
      $set: {
        ...(name && { name }),
        ...(description && { description }),
        ...(status && { status }),
        ...(priority && { priority }),
        ...(dueDate && { dueDate }),
        ...(categories && { categories }),
        ...(tags && { tags }),
        updatedAt: new Date(),
      },
    }
  );

  if (result.matchedCount === 0) {
    throw { status: 404, message: "Task not found" };
  }

  return { message: "Task updated successfully" };
}

async function removeTask(userId, taskId, database) {
  const result = await database.collection("tasks").deleteOne({
    _id: new ObjectId(taskId),
    userId,
  });

  if (result.deletedCount === 0) {
    throw { status: 404, message: "Task not found" };
  }

  return { message: "Task deleted successfully" };
}

module.exports = { getAllTasks, createTask, modifyTask, removeTask };


================================================
File: /backend/services/authService.js
================================================
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const JWT_SECRET = process.env.JWT_SECRET;

async function registerUser(
  email,
  password,
  firstname,
  lastname,
  phone,
  birthdate,
  allowNewsletter,
  consent,
  avatarPath,
  database
) {
  if (
    !email ||
    !password ||
    !firstname ||
    !lastname ||
    !phone ||
    !birthdate ||
    allowNewsletter === undefined ||
    consent === undefined
  ) {
    console.error("Missing required fields");
    throw { status: 400, message: "All fields are required" };
  }

  const hashedPassword = await bcrypt.hash(password, 10);

  try {
    await database.collection("users").insertOne({
      email,
      password: hashedPassword,
      firstname,
      lastname,
      phone,
      birthdate,
      allowNewsletter,
      consent,
      avatar: avatarPath,
      createdAt: new Date(),
    });
    return { message: "User registered successfully" };
  } catch (error) {
    console.error("Error inserting user:", error);
    if (error.code === 11000) {
      throw { status: 400, message: "Email already exists" };
    }
    throw { status: 500, message: "Internal server error" };
  }
}

async function loginUser(email, password, database) {
  console.log("Attempting to log in user with email:", email);
  const user = await database.collection("users").findOne({ email });
  if (!user) {
    console.error("User not found");
    throw { status: 401, message: "Invalid credentials" };
  }

  const validPassword = await bcrypt.compare(password, user.password);
  if (!validPassword) {
    console.error("Invalid password");
    throw { status: 401, message: "Invalid credentials" };
  }

  const token = jwt.sign({ userId: user._id, email: user.email }, JWT_SECRET, {
    expiresIn: "24h",
  });
  return {
    token,
    firstname: user.firstname,
    lastname: user.lastname,
    avatar: user.avatar,
  };
}

module.exports = { registerUser, loginUser };


================================================
File: /backend/middlewares/authMiddleware.js
================================================
const jwt = require("jsonwebtoken");
const JWT_SECRET = process.env.JWT_SECRET;

function authenticateToken(req, res, next) {
  const authHeader = req.headers["authorization"];
  const token = authHeader && authHeader.split(" ")[1];

  if (token == null) return res.sendStatus(401);

  jwt.verify(token, JWT_SECRET, (err, user) => {
    if (err) return res.sendStatus(403);
    req.user = user;
    next();
  });
}

module.exports = { authenticateToken };


================================================
File: /backend/package.json
================================================
{
  "name": "api",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "bcrypt": "^5.1.1",
    "body-parser": "^1.20.3",
    "cors": "^2.8.5",
    "dotenv": "^16.4.7",
    "express": "^4.21.2",
    "jsonwebtoken": "^9.0.2",
    "mongodb": "^4.1.0",
    "multer": "^1.4.5-lts.1"
  }
}


================================================
File: /backend/routes/taskRoutes.js
================================================
const express = require("express");
const { getTasks, addTask, updateTask, deleteTask } = require("../controllers/taskController");
const { authenticateToken } = require("../middlewares/authMiddleware");
const multer = require("multer");

module.exports = (database) => {
  const router = express.Router();

  router.get("/", authenticateToken, (req, res) => getTasks(req, res, database));
  router.post("/add", authenticateToken, multer().none(), (req, res) =>
    addTask(req, res, database)
  );
  router.put("/update/:_id", authenticateToken, multer().none(), (req, res) =>
    updateTask(req, res, database)
  );
  router.delete("/delete/:_id", authenticateToken, (req, res) => deleteTask(req, res, database));

  return router;
};


================================================
File: /backend/routes/authRoutes.js
================================================
const express = require("express");
const { register, login } = require("../controllers/authController");
const multer = require("multer");
const upload = multer({ dest: "uploads/" });

module.exports = (database) => {
  const router = express.Router();

  router.post("/register", upload.single("avatar"), (req, res) => register(req, res, database));
  router.post("/login", multer().none(), (req, res) => login(req, res, database));

  return router;
};


================================================
File: /backend/Dockerfile
================================================
# Use the official Node.js image as the base image
FROM node:18

# Set the working directory
WORKDIR /usr/src/app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm install --no-package-lock

# Rebuild bcrypt
RUN npm rebuild bcrypt --build-from-source

# Copy the rest of the application code
COPY . .

# Expose the port the app runs on
EXPOSE 5038

# Command to run the application
CMD ["node", "index.js"]

================================================
File: /backend/index.js
================================================
require("dotenv").config();
const express = require("express");
const MongoClient = require("mongodb").MongoClient;
const cors = require("cors");
const bodyParser = require("body-parser");
const path = require("path");
const authRoutes = require("./routes/authRoutes");
const taskRoutes = require("./routes/taskRoutes");

const app = express();
app.use(cors());
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.use("/uploads", express.static(path.join(__dirname, "./uploads")));

const MONGODB_URI = process.env.MONGODB_URI;
const DATABASE_NAME = "todo_app";
let database;

app.listen(5038, () => {
  MongoClient.connect(MONGODB_URI, (error, client) => {
    if (error) throw error;
    database = client.db(DATABASE_NAME);
    console.log("Connected to `" + DATABASE_NAME + "`!");

    database.collection("users").createIndex({ email: 1 }, { unique: true });

    app.use("/api/auth", authRoutes(database));
    app.use("/api/tasks", taskRoutes(database));
  });
});


================================================
File: /frontend/.vscode/tasks.json
================================================
{
  // For more information, visit: https://go.microsoft.com/fwlink/?LinkId=733558
  "version": "2.0.0",
  "tasks": [
    {
      "type": "npm",
      "script": "start",
      "isBackground": true,
      "problemMatcher": {
        "owner": "typescript",
        "pattern": "$tsc",
        "background": {
          "activeOnStart": true,
          "beginsPattern": {
            "regexp": "(.*?)"
          },
          "endsPattern": {
            "regexp": "bundle generation complete"
          }
        }
      }
    },
    {
      "type": "npm",
      "script": "test",
      "isBackground": true,
      "problemMatcher": {
        "owner": "typescript",
        "pattern": "$tsc",
        "background": {
          "activeOnStart": true,
          "beginsPattern": {
            "regexp": "(.*?)"
          },
          "endsPattern": {
            "regexp": "bundle generation complete"
          }
        }
      }
    }
  ]
}


================================================
File: /frontend/.vscode/launch.json
================================================
{
  // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
  "version": "0.2.0",
  "configurations": [
    {
      "name": "ng serve",
      "type": "chrome",
      "request": "launch",
      "preLaunchTask": "npm: start",
      "url": "http://localhost:4200/"
    },
    {
      "name": "ng test",
      "type": "chrome",
      "request": "launch",
      "preLaunchTask": "npm: test",
      "url": "http://localhost:9876/debug.html"
    }
  ]
}


================================================
File: /frontend/.vscode/extensions.json
================================================
{
  // For more information, visit: https://go.microsoft.com/fwlink/?linkid=827846
  "recommendations": ["angular.ng-template"]
}


================================================
File: /frontend/.gitignore
================================================
# See https://docs.github.com/get-started/getting-started-with-git/ignoring-files for more about ignoring files.

# Compiled output
/dist
/tmp
/out-tsc
/bazel-out

# Node
/node_modules
npm-debug.log
yarn-error.log

# IDEs and editors
.idea/
.project
.classpath
.c9/
*.launch
.settings/
*.sublime-workspace

# Visual Studio Code
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
.history/*

# Miscellaneous
/.angular/cache
.sass-cache/
/connect.lock
/coverage
/libpeerconnection.log
testem.log
/typings

# System files
.DS_Store
Thumbs.db


================================================
File: /frontend/tsconfig.app.json
================================================
/* To learn more about this file see: https://angular.io/config/tsconfig. */
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "./out-tsc/app",
    "types": []
  },
  "files": [
    "src/main.ts"
  ],
  "include": [
    "src/**/*.d.ts"
  ]
}


================================================
File: /frontend/package.json
================================================
{
  "name": "todo-app",
  "version": "0.0.0",
  "scripts": {
    "ng": "ng",
    "start": "ng serve --host 0.0.0.0 --port 4200",
    "build": "ng build",
    "watch": "ng build --watch --configuration development",
    "test": "ng test"
  },
  "private": true,
  "dependencies": {
    "@angular/animations": "^17.3.0",
    "@angular/cdk": "^19.0.4",
    "@angular/common": "^17.3.0",
    "@angular/compiler": "^17.3.0",
    "@angular/core": "^17.3.0",
    "@angular/forms": "^17.3.0",
    "@angular/platform-browser": "^17.3.0",
    "@angular/platform-browser-dynamic": "^17.3.0",
    "@angular/router": "^17.3.0",
    "rxjs": "~7.8.0",
    "tslib": "^2.8.1",
    "zone.js": "~0.14.3"
  },
  "devDependencies": {
    "@angular-devkit/build-angular": "^17.3.11",
    "@angular/cli": "^17.3.11",
    "@angular/compiler-cli": "^17.3.0",
    "@types/jasmine": "~5.1.0",
    "jasmine-core": "~5.1.0",
    "karma": "~6.4.0",
    "karma-chrome-launcher": "~3.2.0",
    "karma-coverage": "~2.2.0",
    "karma-jasmine": "~5.1.0",
    "karma-jasmine-html-reporter": "~2.1.0",
    "typescript": "~5.4.2"
  }
}


================================================
File: /frontend/tsconfig.spec.json
================================================
/* To learn more about this file see: https://angular.io/config/tsconfig. */
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "./out-tsc/spec",
    "types": [
      "jasmine"
    ]
  },
  "include": [
    "src/**/*.spec.ts",
    "src/**/*.d.ts"
  ]
}


================================================
File: /frontend/.dockerignore
================================================
node_modules
npm-debug.log
dist
.git
.angular
.vscode
*.md
*.log
.editorconfig 

================================================
File: /frontend/Dockerfile
================================================
FROM node:18-alpine

WORKDIR /usr/src/app

# Copy package.json only and install dependencies
COPY package.json ./
RUN npm install --legacy-peer-deps

# Install Angular CLI globally
RUN npm install -g @angular/cli@17.3.11

# Copy the rest of the application files
COPY . .

EXPOSE 4200

CMD ["ng", "serve", "--host", "0.0.0.0", "--poll", "2000"]

================================================
File: /frontend/tsconfig.json
================================================
/* To learn more about this file see: https://angular.io/config/tsconfig. */
{
  "compileOnSave": false,
  "compilerOptions": {
    "outDir": "./dist/out-tsc",
    "strict": true,
    "noImplicitOverride": true,
    "noPropertyAccessFromIndexSignature": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "sourceMap": true,
    "declaration": false,
    "experimentalDecorators": true,
    "moduleResolution": "node",
    "importHelpers": true,
    "target": "ES2022",
    "module": "ES2022",
    "useDefineForClassFields": false,
    "lib": [
      "ES2022",
      "dom"
    ]
  },
  "angularCompilerOptions": {
    "enableI18nLegacyMessageIdFormat": false,
    "strictInjectionParameters": true,
    "strictInputAccessModifiers": true,
    "strictTemplates": true
  }
}


================================================
File: /frontend/README.md
================================================
# TodoApp

This project was generated with [Angular CLI](https://github.com/angular/angular-cli) version 17.3.11.

## Development server

Run `ng serve` for a dev server. Navigate to `http://localhost:4200/`. The application will automatically reload if you change any of the source files.

## Code scaffolding

Run `ng generate component component-name` to generate a new component. You can also use `ng generate directive|pipe|service|class|guard|interface|enum|module`.

## Build

Run `ng build` to build the project. The build artifacts will be stored in the `dist/` directory.

## Running unit tests

Run `ng test` to execute the unit tests via [Karma](https://karma-runner.github.io).

## Running end-to-end tests

Run `ng e2e` to execute the end-to-end tests via a platform of your choice. To use this command, you need to first add a package that implements end-to-end testing capabilities.

## Further help

To get more help on the Angular CLI use `ng help` or go check out the [Angular CLI Overview and Command Reference](https://angular.io/cli) page.


================================================
File: /frontend/src/index.html
================================================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>Todo</title>
    <base href="/" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="icon" type="svg" href="assets/favicons/favicon.svg" />
    <link rel="preconnect" href="https://rsms.me/" />
    <link rel="stylesheet" href="https://rsms.me/inter/inter.css" />
  </head>
  <body>
    <app-root></app-root>
  </body>
</html>


================================================
File: /frontend/src/styles.css
================================================
@font-face {
  font-family: "Departure";
  src: url("./assets/fonts/departure-mono/DepartureMono-Regular.otf")
      format("opentype"),
    url("./assets/fonts/departure-mono/DepartureMono-Regular.woff")
      format("woff"),
    url("./assets/fonts/departure-mono/DepartureMono-Regular.woff2")
      format("woff2");
}

:root {
  --white: #fff;
  --black: #000;
  --primary: #0000ff;
  font-family: Inter, sans-serif;
  font-feature-settings: "liga" 1, "calt" 1; /* fix for Chrome */
}

@supports (font-variation-settings: normal) {
  :root {
    font-family: InterVariable, sans-serif;
  }
}

* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
  font-family: "Departure", monospace;
}

html {
  height: 100%;
  width: 100%;
}

body {
  /* height: 100%; */
  width: 100%;
  background-color: lightgrey;
  color: var(--black);
  padding: 0.5rem;
}

input {
  padding: 0.5rem 1rem;
  border: 1px solid var(--black);
}

input:focus {
  outline: none;
  border: 1px solid var(--primary);
}

button {
  padding: 0.5rem;
  border: none;
  background-color: var(--primary);
  color: var(--white);
  cursor: pointer;
  display: flex;
  justify-content: center;
  align-items: center;
}


================================================
File: /frontend/src/main.ts
================================================
import { bootstrapApplication } from '@angular/platform-browser';
import { appConfig } from './app/app.config';
import { AppComponent } from './app/app.component';

bootstrapApplication(AppComponent, appConfig)
  .catch((err) => console.error(err));


================================================
File: /frontend/src/app/app.routes.ts
================================================
// src/app/app.routes.ts
import { Routes } from '@angular/router';
import { authGuard } from './guards/auth.guard';
import { LoginComponent } from './components/login/login.component';
import { RegisterComponent } from './components/register/register.component';
import { TasksComponent } from './components/tasks/tasks.component';

export const routes: Routes = [
  { path: 'login', component: LoginComponent },
  { path: 'register', component: RegisterComponent },
  { path: 'tasks', component: TasksComponent, canActivate: [authGuard] },
  { path: '', redirectTo: '/tasks', pathMatch: 'full' },
];


================================================
File: /frontend/src/app/app.config.ts
================================================
// src/app/app.config.ts
import { ApplicationConfig } from '@angular/core';
import { provideRouter } from '@angular/router';
import { routes } from './app.routes';
import { provideHttpClient, withInterceptors } from '@angular/common/http';
import { authInterceptor } from './interceptors/auth.interceptor';

export const appConfig: ApplicationConfig = {
  providers: [
    provideRouter(routes),
    provideHttpClient(withInterceptors([authInterceptor])),
  ],
};


================================================
File: /frontend/src/app/services/auth.service.ts
================================================
import { Injectable, EventEmitter } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { BehaviorSubject, Observable } from 'rxjs';

@Injectable({
  providedIn: 'root',
})
export class AuthService {
  private tokenKey = 'authToken';
  private userInfoKey = 'userInfo';
  private readonly apiUrl = 'http://localhost:5038/api/auth';
  private isAuthenticatedSubject = new BehaviorSubject<boolean>(
    this.hasToken()
  );
  isAuthenticated$ = this.isAuthenticatedSubject.asObservable();
  userInfoUpdated = new EventEmitter<void>();

  constructor(private http: HttpClient) {}

  private hasToken(): boolean {
    return !!localStorage.getItem(this.tokenKey);
  }

  setToken(token: string) {
    localStorage.setItem(this.tokenKey, token);
    this.isAuthenticatedSubject.next(true);
  }

  setUserInfo(userInfo: any) {
    localStorage.setItem(this.userInfoKey, JSON.stringify(userInfo));
    this.userInfoUpdated.emit();
  }

  getUserInfo(): any {
    const userInfo = localStorage.getItem(this.userInfoKey);
    return userInfo ? JSON.parse(userInfo) : null;
  }

  getToken(): string | null {
    return localStorage.getItem(this.tokenKey);
  }

  clearToken() {
    localStorage.removeItem(this.tokenKey);
    localStorage.removeItem(this.userInfoKey);
    this.isAuthenticatedSubject.next(false);
  }

  register(email: string, password: string): Observable<any> {
    return this.http.post<any>(`${this.apiUrl}/register`, { email, password });
  }

  login(email: string, password: string): Observable<any> {
    return this.http.post<any>(`${this.apiUrl}/login`, { email, password });
  }

  logout() {
    this.clearToken();
  }
}


================================================
File: /frontend/src/app/app.component.spec.ts
================================================
import { TestBed } from '@angular/core/testing';
import { AppComponent } from './app.component';

describe('AppComponent', () => {
  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [AppComponent],
    }).compileComponents();
  });

  it('should create the app', () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app).toBeTruthy();
  });

  it(`should have the 'todo-app' title`, () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app.title).toEqual('todo-app');
  });

  it('should render title', () => {
    const fixture = TestBed.createComponent(AppComponent);
    fixture.detectChanges();
    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector('h1')?.textContent).toContain('Hello, todo-app');
  });
});


================================================
File: /frontend/src/app/components/card/card.component.spec.ts
================================================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { CardComponent } from './card.component';

describe('CardComponent', () => {
  let component: CardComponent;
  let fixture: ComponentFixture<CardComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [CardComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(CardComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


================================================
File: /frontend/src/app/components/card/card.component.html
================================================
<div class="task-controls">
  <input
    type="text"
    [(ngModel)]="task.name"
    (keyup.enter)="updateTask(task)"
    (blur)="updateTask(task)"
    placeholder="Task name"
  />
  <button class="view-details" (click)="openModal()">↗</button>
  <button class="drag-handle" cdkDragHandle>═</button>
  <button class="delete-btn" (click)="deleteTask(task._id)">×</button>
</div>

<app-task-modal
  [task]="task"
  [isOpen]="isModalOpen"
  (closeModal)="closeModal()"
  (taskUpdated)="updateTask($event)"
></app-task-modal>


================================================
File: /frontend/src/app/components/card/card.component.ts
================================================
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { TaskModalComponent } from '../task-modal/task-modal.component';
import { CdkDrag, CdkDragHandle } from '@angular/cdk/drag-drop';

interface Task {
  _id: string;
  name: string;
  description: string | null;
  status: 'to start' | 'in progress' | 'completed';
  priority: 'low' | 'medium' | 'high';
  dueDate: string | null;
  categories: string[] | null;
  tags: string[] | null;
}

@Component({
  selector: 'app-card',
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    TaskModalComponent,
    CdkDrag,
    CdkDragHandle,
  ],
  templateUrl: './card.component.html',
  styleUrls: ['./card.component.css'],
})
export class CardComponent {
  @Input() task!: Task;
  @Input() isModalOpen = false;
  @Output() taskUpdated = new EventEmitter<[Task, boolean]>();
  @Output() taskDeleted = new EventEmitter<string>();
  @Output() modalClosed = new EventEmitter<void>();

  get formattedDueDate(): string {
    if (!this.task?.dueDate) return '';
    try {
      const date = new Date(this.task.dueDate);
      return date.toISOString().split('T')[0];
    } catch (e) {
      console.error('Error formatting date:', e);
      return '';
    }
  }

  set formattedDueDate(value: string) {
    if (value) {
      this.task.dueDate = new Date(value + 'T00:00:00.000Z').toISOString();
    } else {
      this.task.dueDate = null;
    }
    this.updateTask(this.task);
  }

  updateTask(task: Task) {
    this.taskUpdated.emit([task, false]);
  }

  deleteTask(taskId: string) {
    this.taskDeleted.emit(taskId);
  }

  addTag(tagInput: string) {
    if (!tagInput.trim()) return;

    // Split by comma or space and process each tag
    const newTags = tagInput
      .split(/[,\s]+/)
      .map((tag) => tag.trim())
      .filter((tag) => tag.length > 0);

    if (!this.task.tags) {
      this.task.tags = [];
    }

    // Add new tags that don't already exist
    this.task.tags = [...new Set([...this.task.tags, ...newTags])];

    this.updateTask(this.task);
  }

  addCategory(categoryInput: string) {
    if (!categoryInput.trim()) return;

    // Split by comma or space and process each category
    const newCategories = categoryInput
      .split(/[,\s]+/)
      .map((category) => category.trim())
      .filter((category) => category.length > 0);

    if (!this.task.categories) {
      this.task.categories = [];
    }

    // Add new categories that don't already exist
    this.task.categories = [
      ...new Set([...this.task.categories, ...newCategories]),
    ];

    this.updateTask(this.task);
  }
  removeTag(tagToRemove: string) {
    if (!this.task.tags) return;
    this.task.tags = this.task.tags.filter((tag) => tag !== tagToRemove);
    this.updateTask(this.task);
  }
  removeCategory(categoryToRemove: string) {
    if (!this.task.categories) return;
    this.task.categories = this.task.categories.filter(
      (category) => category !== categoryToRemove
    );
    this.updateTask(this.task);
  }

  openModal() {
    // Update task and open modal
    this.taskUpdated.emit([this.task, true]);
  }

  closeModal() {
    localStorage.removeItem('activeTaskId');
    this.modalClosed.emit();
  }
}


================================================
File: /frontend/src/app/components/card/card.component.css
================================================
:host {
  width: 100%;
  display: block;
}

.task-controls {
  display: flex;
  flex-direction: row;
  gap: 0.5rem;
  width: 100%;
}

input[type="text"] {
  flex: 1;
  min-width: 0;
  padding: 0.25rem;
  border: 1px solid #ccc;
}

button {
  width: 2rem;
  aspect-ratio: 1 / 1;
  display: flex;
  align-items: center;
  justify-content: center;
}

.view-details {
  background-color: var(--primary);
  color: lightgrey;
}

.view-details:hover {
  background-color: lightgrey;
  color: var(--primary);
}

.delete-btn {
  background-color: lightgrey;
  color: red;
}

.delete-btn:hover {
  background-color: red;
  color: lightgrey;
}

.drag-handle {
  cursor: move;
  user-select: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  touch-action: none;
}

.drag-handle:hover {
  color: var(--primary);
  background-color: lightgrey;
}

.cdk-drag {
  cursor: default;
}

.cdk-drag-handle {
  cursor: move;
}


================================================
File: /frontend/src/app/components/login/login.component.html
================================================
<div class="login-container">
  <span>Login</span>
  <form (ngSubmit)="onSubmit()">
    <div>
      <label for="email">Email:</label>
      <input
        type="email"
        id="email"
        [(ngModel)]="email"
        name="email"
        required
      />
    </div>
    <div>
      <label for="password">Password:</label>
      <input
        type="password"
        id="password"
        [(ngModel)]="password"
        name="password"
        required
      />
    </div>
    <button type="submit">LOGIN</button>
    <p>Don't have an account? <a routerLink="/register">Register</a></p>
    <p *ngIf="error" class="error">{{ error }}</p>
  </form>
</div>


================================================
File: /frontend/src/app/components/login/login.component.css
================================================
.login-container {
  max-width: 400px;
  margin: 0.5rem 0;
  padding: 0.5rem;
  border: 1px solid var(--black);
  background-color: var(--white);
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

form {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

label {
  font-size: 0.75rem;
}

input {
  width: 100%;
  padding: 0.5rem;
  border: 1px solid #ccc;
}

button {
  width: 100%;
  padding: 0.5rem;
  background-color: var(--primary);
  color: white;
  border: none;
  cursor: pointer;
}

button:hover {
  background-color: var(--primary);
}

.error {
  color: red;
}


================================================
File: /frontend/src/app/components/login/login.component.ts
================================================
import { Component } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Router, RouterModule } from '@angular/router';
import { AuthService } from '../../services/auth.service';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';

@Component({
  selector: 'app-login',
  standalone: true,
  imports: [FormsModule, CommonModule, RouterModule],
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.css'],
})
export class LoginComponent {
  email: string = '';
  password: string = '';
  error: string = '';

  constructor(
    private http: HttpClient,
    private router: Router,
    private authService: AuthService
  ) {}

  onSubmit() {
    this.http
      .post<any>('http://localhost:5038/api/auth/login', {
        email: this.email,
        password: this.password,
      })
      .subscribe({
        next: (response) => {
          this.authService.setToken(response.token);
          this.authService.setUserInfo({
            firstname: response.firstname,
            lastname: response.lastname,
            avatar: response.avatar,
          });
          this.authService.userInfoUpdated.emit();
          this.router.navigate(['/']);
        },
        error: (err) => {
          console.error('Error logging in:', err);
          this.error = err.error.error || 'An error occurred';
        },
      });
  }
}

================================================
File: /frontend/src/app/components/tasks/tasks.component.ts
================================================
import { Component, inject, OnInit } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { DecimalPipe, CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { AuthService } from '../../services/auth.service';
import { FilterPipe } from '../../pipes/filter.pipe';
import { CardComponent } from '../card/card.component';
import {
  CdkDragDrop,
  moveItemInArray,
  transferArrayItem,
} from '@angular/cdk/drag-drop';
import { DragDropModule } from '@angular/cdk/drag-drop';

interface Task {
  _id: string;
  name: string;
  description: string | null;
  status: 'to start' | 'in progress' | 'completed';
  priority: 'low' | 'medium' | 'high';
  dueDate: string | null;
  categories: string[] | null;
  tags: string[] | null;
}

type TaskStatus = Task['status'];
type TaskPriority = Task['priority'];

@Component({
  selector: 'app-tasks',
  standalone: true,
  imports: [
    DecimalPipe,
    CommonModule,
    FormsModule,
    FilterPipe,
    CardComponent,
    DragDropModule,
  ],
  templateUrl: './tasks.component.html',
  styleUrls: ['./tasks.component.css'],
})
export class TasksComponent implements OnInit {
  private http = inject(HttpClient);
  private authService = inject(AuthService);
  private readonly apiUrl = 'http://localhost:5038/api/';
  tasks: Task[] = [];
  Math = Math;
  activeTaskId: string | null = null;

  ngOnInit() {
    this.activeTaskId = localStorage.getItem('activeTaskId');
    this.refreshTasks();
  }

  refreshTasks() {
    const headers = new HttpHeaders().set(
      'Authorization',
      `Bearer ${this.authService.getToken()}`
    );
    this.http.get<Task[]>(this.apiUrl + 'tasks', { headers }).subscribe({
      next: (data) => {
        this.tasks = data;
      },
      error: (error) => {
        console.error('Error fetching tasks:', error);
      },
    });
  }

  addTask(
    name: string,
    description: string,
    status: string,
    priority: string,
    dueDate: string,
    categories: string,
    tags: string
  ) {
    if (!name.trim()) return;

    const headers = new HttpHeaders().set(
      'Authorization',
      `Bearer ${this.authService.getToken()}`
    );

    this.http
      .post<any>(
        this.apiUrl + 'tasks/add',
        {
          name,
          description,
          status: this.validateStatus(status),
          priority: this.validatePriority(priority),
          dueDate: this.formatDueDate(dueDate),
          categories: this.processCategories(categories),
          tags: this.processTags(tags),
        },
        { headers }
      )
      .subscribe({
        next: () => {
          this.refreshTasks();
        },
        error: (error) => {
          console.error('Error adding task:', error);
        },
      });
  }

  updateTask(task: Task, openModal: boolean = false) {
    const headers = new HttpHeaders().set(
      'Authorization',
      `Bearer ${this.authService.getToken()}`
    );

    this.http
      .put<any>(
        this.apiUrl + 'tasks/update/' + task._id,
        {
          name: task.name,
          description: task.description,
          status: task.status,
          priority: task.priority,
          dueDate: task.dueDate,
          categories: task.categories,
          tags: task.tags,
        },
        { headers }
      )
      .subscribe({
        next: () => {
          if (openModal) {
            this.activeTaskId = task._id;
            localStorage.setItem('activeTaskId', task._id);
          }
          this.refreshTasks();
        },
        error: (error) => {
          console.error('Error updating task:', error);
        },
      });
  }

  deleteTask(_id: string) {
    const headers = new HttpHeaders().set(
      'Authorization',
      `Bearer ${this.authService.getToken()}`
    );

    this.http
      .delete<any>(this.apiUrl + 'tasks/delete/' + _id, { headers })
      .subscribe({
        next: () => {
          this.refreshTasks();
        },
        error: (error) => {
          console.error('Error deleting task:', error);
        },
      });
  }

  trackById(index: number, task: Task): string {
    return task._id;
  }

  private validateStatus(status: string): TaskStatus {
    const validStatuses: TaskStatus[] = [
      'to start',
      'in progress',
      'completed',
    ];
    return validStatuses.includes(status as TaskStatus)
      ? (status as TaskStatus)
      : 'to start';
  }

  private validatePriority(priority: string): TaskPriority {
    const validPriorities: TaskPriority[] = ['low', 'medium', 'high'];
    return validPriorities.includes(priority as TaskPriority)
      ? (priority as TaskPriority)
      : 'medium';
  }

  private formatDueDate(dueDate: string): string {
    return dueDate ? new Date(dueDate + 'T00:00:00.000Z').toISOString() : '';
  }

  private formatDueDateForInput(dueDate: string): string {
    return dueDate ? new Date(dueDate).toISOString().split('T')[0] : '';
  }

  private formatDueDateForDisplay(dueDate: string): string {
    return dueDate ? new Date(dueDate).toLocaleDateString() : '';
  }

  private processCategories(categories: string): string[] {
    return categories
      .split(/[,\s]+/)
      .map((cat) => cat.trim())
      .filter((cat) => cat.length > 0);
  }

  private processTags(tags: string): string[] {
    return tags
      .split(/[,\s]+/)
      .map((tag) => tag.trim())
      .filter((tag) => tag.length > 0);
  }

  isTaskModalOpen(taskId: string): boolean {
    return this.activeTaskId === taskId;
  }

  onModalClose() {
    this.activeTaskId = null;
    localStorage.removeItem('activeTaskId');
    setTimeout(() => {
      this.refreshTasks();
    }, 0);
  }

  onDrop(event: CdkDragDrop<Task[]>) {
    if (event.previousContainer === event.container) {
      moveItemInArray(
        event.container.data,
        event.previousIndex,
        event.currentIndex
      );
    } else {
      transferArrayItem(
        event.previousContainer.data,
        event.container.data,
        event.previousIndex,
        event.currentIndex
      );

      // Update the dropped task's status
      const task = event.container.data[event.currentIndex];
      const newStatus = event.container.id;
      if (task.status !== newStatus) {
        task.status = newStatus as 'to start' | 'in progress' | 'completed';
        this.updateTask(task, false);
      }
    }
  }
}


================================================
File: /frontend/src/app/components/tasks/tasks.component.css
================================================
:host {
  display: flex;
  flex-direction: column;
  align-items: stretch;
  gap: 0.5rem;
  height: 100%;
}

main {
  margin-top: calc(0.5rem + 1px);
  height: calc(100vh - 3.5rem - 1px);
  width: 100%;
  display: flex;
  flex-wrap: wrap;
  gap: 0.5rem;
}

@media screen and (max-width: 768px) {
  main {
    flex-direction: column;
    height: auto;
  }

  .side-menu {
    width: 100%;
  }

  .tasks-list {
    width: 100%;
    flex-direction: column;
    /* overflow-x: hidden;
    overflow-y: auto; */
  }

  .tasks-list > * {
    min-width: 100%;
    min-height: 200px;
  }
}

.side-menu {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.add-task {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
  padding: 0.5rem;
  border: 1px solid var(--black);
  background-color: var(--white);
}

.add-task > span {
  border-bottom: 1px solid var(--black);
}

.tasks-stats {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
  padding: 0.5rem;
  border: 1px solid var(--black);
  background-color: var(--white);
}

.tasks-stats > span > span {
  color: var(--primary);
}

.progress-bar {
  display: flex;
  flex-direction: row;
  align-items: center;
  gap: 0.5rem;
}

.progress-container {
  width: 100%;
  background-color: #e0e0e0;
  height: 1rem;
  overflow: hidden;
}

.progress {
  height: 100%;
  background-color: var(--primary);
  transition: width 300ms ease;
}

.priority-bar {
  display: flex;
  width: 100%;
  height: 1rem;
  overflow: hidden;
}

.priority {
  height: 100%;
  transition: width 300ms ease;
}

.priority.low {
  background-color: lightgreen;
}
.priority.medium {
  background-color: lightsalmon;
}
.priority.high {
  background-color: lightcoral;
}

.tasks-counter {
  width: max-content;
  display: flex;
  flex-direction: column;
}

.tasks-counter div {
  display: flex;
  justify-content: space-between;
}

.tasks-counter div span > span {
  color: var(--primary);
}

.tasks-list {
  display: flex;
  gap: 0.5rem;
  flex: 1;
  width: 100%;
  overflow-x: scroll;
}

.tasks-list > * {
  width: calc(100% / 3 - 1rem / 3);
  padding: 0.5rem;
  border: 1px solid var(--black);
  background-color: var(--white);
  gap: 0.5rem;
  display: flex;
  flex-direction: column;
}

.tasks-list > * > span {
  white-space: nowrap;
  border-bottom: 1px solid var(--black);
}

ul {
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  gap: 0.5rem;
}

li {
  width: 100%;
  display: flex;
  flex-direction: column;
  align-items: stretch;
  gap: 0.5rem;
}

select {
  padding: 0.25rem;
  border-radius: unset;
  outline: none;
  /* border: none; */
  border: 1px solid #ccc;
  font-size: 0.75rem;
  color: black;
  /* -webkit-appearance: none;
  -moz-appearance: none;
  text-indent: 1px;
  text-overflow: ""; */
}

input {
  padding: 0.25rem;
  border: 1px solid #ccc;
}

button {
  padding: 0.25rem 0.5rem;
  border: none;
  background-color: var(--primary);
  color: white;
  cursor: pointer;
}

button:hover {
  background-color: var(--primary);
}

.low-priority {
  background-color: green;
}

.medium-priority {
  background-color: orange;
}

.high-priority {
  background-color: red;
}

.cdk-drag-preview {
  box-sizing: border-box;
  border-radius: 4px;
  box-shadow: 0 5px 5px -3px rgba(0, 0, 0, 0.2),
    0 8px 10px 1px rgba(0, 0, 0, 0.14), 0 3px 14px 2px rgba(0, 0, 0, 0.12);
}

.cdk-drag-placeholder {
  opacity: 0.3;
  background: #ccc;
  border: 1px dashed #999;
}

.cdk-drag-animating {
  transition: transform 300ms cubic-bezier(0.4, 0, 0.2, 1);
}

.tasks-list ul.cdk-drop-list-dragging li:not(.cdk-drag-placeholder) {
  transition: transform 300ms cubic-bezier(0.4, 0, 0.2, 1);
}

ul.cdk-drop-list-receiving {
  transition: transform 300ms cubic-bezier(0.4, 0, 0.2, 1);
}


================================================
File: /frontend/src/app/components/tasks/tasks.component.html
================================================
<main>
  <section class="side-menu">
    <section class="add-task">
      <span>Add</span>
      <input #newTaskName type="text" placeholder="Task name" />
      <input #newTaskDesc type="text" placeholder="Task description" />
      <select #newTaskStatus>
        <option value="to start">To Start</option>
        <option value="in progress">In Progress</option>
        <option value="completed">Completed</option>
      </select>
      <select #newTaskPriority>
        <option value="low">Low</option>
        <option value="medium" selected>Medium</option>
        <option value="high">High</option>
      </select>
      <input #newTaskDueDate type="date" placeholder="Due date" />
      <input #newTaskCategories type="text" placeholder="Categories" />
      <input #newTaskTags type="text" placeholder="Tags" />
      <button
        (click)="
          addTask(
            newTaskName.value,
            newTaskDesc.value,
            newTaskStatus.value,
            newTaskPriority.value,
            newTaskDueDate.value,
            newTaskCategories.value,
            newTaskTags.value
          )
        "
      >
        ADD
      </button>
    </section>
    <section class="tasks-stats">
      <span>
        <span>{{ tasks.length | number : "3.0-0" }}</span>
        task(s).
      </span>
      <span>
        <span>{{
          (tasks | filter : { status: "completed" }).length | number : "3.0-0"
        }}</span>
        completed.
      </span>
      <section class="progress-bar">
        <span
          >{{
            ((tasks | filter : { status: "completed" }).length / tasks.length) *
              100 | number : "1.0-0"
          }}%</span
        >
        <div class="progress-container">
          <div
            class="progress"
            [style.width.%]="
              ((tasks | filter : { status: 'completed' }).length /
                tasks.length) *
              100
            "
          ></div>
        </div>
      </section>
    </section>
    <section class="tasks-stats">
      <span>Priority Distribution:</span>
      <section class="priority-stats">
        <div class="priority-bar">
          <div
            class="priority low"
            [style.width.%]="
              ((tasks | filter : { priority: 'low' }).length / tasks.length) *
              100
            "
          ></div>
          <div
            class="priority medium"
            [style.width.%]="
              ((tasks | filter : { priority: 'medium' }).length /
                tasks.length) *
              100
            "
          ></div>
          <div
            class="priority high"
            [style.width.%]="
              ((tasks | filter : { priority: 'high' }).length / tasks.length) *
              100
            "
          ></div>
        </div>
      </section>
    </section>
    <!-- <section class="tasks-stats">
      <span>Categories:</span>
      <section class="categories-stats">
        <div class="category-bar">
          <div class="category" *ngFor="let task of tasks">
            {{ task.categories }}
          </div>
        </div>
      </section>
    </section>
    <section class="tasks-stats">
      <span>Tags:</span>
      <section class="tags-stats">
        <div class="tag-bar">
          <div class="tag" *ngFor="let task of tasks">
            {{ task.tags }}
          </div>
        </div>
      </section>
    </section> -->
  </section>
  <section class="tasks-list">
    <div class="tasks-to-start">
      <span>To Start</span>
      <ul
        cdkDropList
        id="to start"
        [cdkDropListData]="tasks | filter : { status: 'to start' }"
        [cdkDropListConnectedTo]="['in progress', 'completed']"
        (cdkDropListDropped)="onDrop($event)"
      >
        <li
          *ngFor="
            let task of tasks | filter : { status: 'to start' };
            trackBy: trackById
          "
          cdkDrag
          cdkDragBoundary=".tasks-list"
          [cdkDragDisabled]="isTaskModalOpen(task._id)"
        >
          <app-card
            [task]="task"
            [isModalOpen]="isTaskModalOpen(task._id)"
            (taskUpdated)="updateTask($event[0], $event[1])"
            (taskDeleted)="deleteTask($event)"
            (modalClosed)="onModalClose()"
          ></app-card>
        </li>
      </ul>
    </div>

    <div class="tasks-in-progress">
      <span>In Progress</span>
      <ul
        cdkDropList
        id="in progress"
        [cdkDropListData]="tasks | filter : { status: 'in progress' }"
        [cdkDropListConnectedTo]="['to start', 'completed']"
        (cdkDropListDropped)="onDrop($event)"
      >
        <li
          *ngFor="
            let task of tasks | filter : { status: 'in progress' };
            trackBy: trackById
          "
          cdkDrag
          cdkDragBoundary=".tasks-list"
          [cdkDragDisabled]="isTaskModalOpen(task._id)"
        >
          <app-card
            [task]="task"
            [isModalOpen]="isTaskModalOpen(task._id)"
            (taskUpdated)="updateTask($event[0], $event[1])"
            (taskDeleted)="deleteTask($event)"
            (modalClosed)="onModalClose()"
          ></app-card>
        </li>
      </ul>
    </div>

    <div class="tasks-completed">
      <span>Completed</span>
      <ul
        cdkDropList
        id="completed"
        [cdkDropListData]="tasks | filter : { status: 'completed' }"
        [cdkDropListConnectedTo]="['to start', 'in progress']"
        (cdkDropListDropped)="onDrop($event)"
      >
        <li
          *ngFor="
            let task of tasks | filter : { status: 'completed' };
            trackBy: trackById
          "
          cdkDrag
          cdkDragBoundary=".tasks-list"
          [cdkDragDisabled]="isTaskModalOpen(task._id)"
        >
          <app-card
            [task]="task"
            [isModalOpen]="isTaskModalOpen(task._id)"
            (taskUpdated)="updateTask($event[0], $event[1])"
            (taskDeleted)="deleteTask($event)"
            (modalClosed)="onModalClose()"
          ></app-card>
        </li>
      </ul>
    </div>
  </section>
</main>


================================================
File: /frontend/src/app/components/task-modal/task-modal.component.css
================================================
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.modal-content {
  background: white;
  padding: 0.5rem;
  border: 1px solid var(--black);
  max-width: calc(100% - 2rem);
  width: 600px;
  max-height: 90vh;
  overflow-y: auto;
  position: relative;
}

.modal-body {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.close-button {
  position: absolute;
  aspect-ratio: 1/1;
  color: var(--black);
  top: 1rem;
  right: 1rem;
  background: none;
  border: none;
  font-size: 1.5rem;
  cursor: pointer;
  padding: 0.5rem;
}

.task-info {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.info-group {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.info-group label {
  font-size: 0.75rem;
}

.categories,
.tags {
  display: flex;
  flex-wrap: wrap;
  gap: 0.25rem;
}

.category,
.tag {
  height: 2rem;
  background: var(--primary);
  color: var(--white);
  padding: 0.25rem 0.5rem;
  font-size: 0.75rem;
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

select,
input,
textarea {
  border: 1px solid #ccc;
  padding: 0.25rem;
  border-radius: unset;
  outline: none;
}

textarea {
  resize: vertical;
  min-height: 80px;
  max-height: 200px;
}

.remove-btn {
  background: none;
  border: none;
  color: var(--white);
  padding: 0 0.25rem;
  cursor: pointer;
  font-size: 1rem;
}

.remove-btn:hover {
  color: red;
}

.category-input,
.tag-input {
  width: 100%;
}

.low-priority {
  background-color: lightgreen;
}
.medium-priority {
  background-color: lightsalmon;
}
.high-priority {
  background-color: lightcoral;
}


================================================
File: /frontend/src/app/components/task-modal/task-modal.component.html
================================================
<div class="modal-overlay" *ngIf="isOpen" (click)="close()">
  <div class="modal-content" (click)="$event.stopPropagation()">
    <!-- <button class="close-button" (click)="close()">×</button> -->

    <div class="modal-body">
      <h2>{{ task.name }}</h2>

      <div class="task-info">
        <div class="info-group">
          <label>Status:</label>
          <select [(ngModel)]="task.status" (change)="updateTask()">
            <option value="to start">To Start</option>
            <option value="in progress">In Progress</option>
            <option value="completed">Completed</option>
          </select>
        </div>

        <div class="info-group">
          <label>Priority:</label>
          <select
            [(ngModel)]="task.priority"
            (change)="updateTask()"
            [ngClass]="{
              'low-priority': task.priority === 'low',
              'medium-priority': task.priority === 'medium',
              'high-priority': task.priority === 'high'
            }"
          >
            <option value="low">Low</option>
            <option value="medium">Medium</option>
            <option value="high">High</option>
          </select>
        </div>

        <div class="info-group">
          <label>Due Date:</label>
          <input
            type="date"
            [ngModel]="formattedDueDate"
            (ngModelChange)="updateDueDate($event)"
          />
        </div>

        <div class="info-group">
          <label>Description:</label>
          <textarea
            [(ngModel)]="task.description"
            (blur)="updateTask()"
            rows="3"
            placeholder="Add a description..."
          ></textarea>
        </div>

        <div class="info-group">
          <label>Categories:</label>
          <div class="categories" *ngIf="task.categories && task.categories.length > 0">
            <span class="category" *ngFor="let category of task.categories">
              {{ category }}
              <button class="remove-btn" (click)="removeCategory(category)">
                ×
              </button>
            </span>
          </div>
          <input
            #categoryInput
            type="text"
            placeholder="Add category..."
            class="category-input"
            (keyup.enter)="
              addCategory(categoryInput.value); categoryInput.value = ''
            "
          />
        </div>

        <div class="info-group">
          <label>Tags:</label>
          <div class="tags" *ngIf="task.tags && task.tags.length > 0">
            <span class="tag" *ngFor="let tag of task.tags">
              {{ tag }}
              <button class="remove-btn" (click)="removeTag(tag)">×</button>
            </span>
          </div>
          <input
            #tagInput
            type="text"
            placeholder="Add tag..."
            class="tag-input"
            (keyup.enter)="addTag(tagInput.value); tagInput.value = ''"
          />
        </div>
      </div>
    </div>
  </div>
</div>


================================================
File: /frontend/src/app/components/task-modal/task-modal.component.ts
================================================
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';

interface Task {
  _id: string;
  name: string;
  description: string | null;
  status: 'to start' | 'in progress' | 'completed';
  priority: 'low' | 'medium' | 'high';
  dueDate: string | null;
  categories: string[] | null;
  tags: string[] | null;
}

@Component({
  selector: 'app-task-modal',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './task-modal.component.html',
  styleUrls: ['./task-modal.component.css'],
})
export class TaskModalComponent {
  @Input() task!: Task;
  @Input() isOpen = false;
  @Output() closeModal = new EventEmitter<void>();
  @Output() taskUpdated = new EventEmitter<Task>();

  get formattedDueDate(): string {
    if (!this.task?.dueDate) return '';
    return new Date(this.task.dueDate).toISOString().split('T')[0];
  }

  updateDueDate(value: string) {
    this.task.dueDate = value
      ? new Date(value + 'T00:00:00.000Z').toISOString()
      : null;
    this.updateTask();
  }

  addCategory(categoryInput: string) {
    if (!categoryInput.trim()) return;

    const newCategories = categoryInput
      .split(/[,\s]+/)
      .map((category) => category.trim())
      .filter((category) => category.length > 0);

    if (!this.task.categories) {
      this.task.categories = [];
    }

    this.task.categories = [
      ...new Set([...this.task.categories, ...newCategories]),
    ];

    this.updateTask();
  }

  addTag(tagInput: string) {
    if (!tagInput.trim()) return;

    const newTags = tagInput
      .split(/[,\s]+/)
      .map((tag) => tag.trim())
      .filter((tag) => tag.length > 0);

    if (!this.task.tags) {
      this.task.tags = [];
    }

    this.task.tags = [...new Set([...this.task.tags, ...newTags])];

    this.updateTask();
  }

  removeCategory(categoryToRemove: string) {
    this.task.categories =
      this.task.categories?.filter(
        (category) => category !== categoryToRemove
      ) || [];
    this.updateTask();
  }

  removeTag(tagToRemove: string) {
    this.task.tags = this.task.tags?.filter((tag) => tag !== tagToRemove) || [];
    this.updateTask();
  }

  updateTask() {
    this.taskUpdated.emit(this.task);
  }

  close() {
    this.closeModal.emit();
  }
}


================================================
File: /frontend/src/app/components/register/register.component.html
================================================
<div class="auth-container">
  <span>Register</span>
  <form (ngSubmit)="onSubmit()">
    <div>
      <label for="email">Email:</label>
      <input
        type="email"
        id="email"
        [(ngModel)]="email"
        name="email"
        placeholder="Email"
        required
      />
    </div>
    <div>
      <label for="password">Password:</label>
      <input
        type="password"
        id="password"
        [(ngModel)]="password"
        name="password"
        placeholder="Password"
        required
      />
    </div>
    <div>
      <label for="firstname">First Name:</label>
      <input
        type="text"
        id="firstname"
        [(ngModel)]="firstname"
        name="firstname"
        placeholder="First Name"
        required
      />
    </div>
    <div>
      <label for="lastname">Last Name:</label>
      <input
        type="text"
        id="lastname"
        [(ngModel)]="lastname"
        name="lastname"
        placeholder="Last Name"
        required
      />
    </div>
    <div>
      <label for="phone">Phone:</label>
      <input
        type="text"
        id="phone"
        [(ngModel)]="phone"
        name="phone"
        placeholder="Phone"
        required
      />
    </div>
    <div>
      <label for="countryCode">Country Code:</label>
      <input
        type="text"
        id="countryCode"
        [(ngModel)]="countryCode"
        name="countryCode"
        placeholder="Country Code"
        required
      />
    </div>
    <div>
      <label for="birthdate">Birthdate:</label>
      <input
        type="date"
        id="birthdate"
        [(ngModel)]="birthdate"
        name="birthdate"
        required
      />
    </div>
    <div>
      <label for="allowNewsletter">Allow Newsletter:</label>
      <input
        type="checkbox"
        id="allowNewsletter"
        [(ngModel)]="allowNewsletter"
        name="allowNewsletter"
      />
    </div>
    <div>
      <label for="consent">Consent:</label>
      <input
        type="checkbox"
        id="consent"
        [(ngModel)]="consent"
        name="consent"
        required
      />
    </div>
    <div>
      <label for="avatar">Avatar:</label>
      <input
        type="file"
        id="avatar"
        (change)="onFileChange($event)"
        name="avatar"
      />
    </div>
    <button type="submit">REGISTER</button>
    <p>Already have an account? <a routerLink="/login">Login</a></p>
    <p *ngIf="error" class="error">{{ error }}</p>
  </form>
</div>


================================================
File: /frontend/src/app/components/register/register.component.ts
================================================
import { Component } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Router, RouterModule } from '@angular/router';
import { AuthService } from '../../services/auth.service';
import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-register',
  standalone: true,
  imports: [FormsModule, CommonModule, RouterModule],
  templateUrl: './register.component.html',
  styleUrls: ['./register.component.css'],
})
export class RegisterComponent {
  email: string = '';
  password: string = '';
  firstname: string = '';
  lastname: string = '';
  phone: string = '';
  countryCode: string = '';
  birthdate: string = '';
  allowNewsletter: boolean = false;
  consent: boolean = false;
  avatar: File | null = null;
  error: string = '';

  constructor(
    private http: HttpClient,
    private router: Router,
    private authService: AuthService
  ) {}

  onFileChange(event: any) {
    this.avatar = event.target.files[0];
  }

  onSubmit() {
    const formData = new FormData();
    formData.append('email', this.email);
    formData.append('password', this.password);
    formData.append('firstname', this.firstname);
    formData.append('lastname', this.lastname);
    formData.append('phone', `${this.countryCode}${this.phone}`);
    formData.append('birthdate', this.birthdate);
    formData.append('allowNewsletter', this.allowNewsletter.toString());
    formData.append('consent', this.consent.toString());
    if (this.avatar) {
      formData.append('avatar', this.avatar);
    }

    this.http
      .post<any>('http://localhost:5038/api/auth/register', formData)
      .subscribe({
        next: () => this.router.navigate(['/login']),
        error: (err) => {
          console.error('Error registering:', err);
          this.error = err.error.error || 'An error occurred';
        },
      });
  }
}


================================================
File: /frontend/src/app/components/register/register.component.css
================================================
.auth-container {
  max-width: 400px;
  margin: 0.5rem 0;
  padding: 0.5rem;
  border: 1px solid var(--black);
  background-color: var(--white);
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

form {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

label {
  font-size: 0.75rem;
}

input {
  width: 100%;
  padding: 0.5rem;
  border: 1px solid #ccc;
}

button {
  width: 100%;
  padding: 0.5rem;
  background-color: var(--primary);
  color: white;
  border: none;
  cursor: pointer;
}

button:hover {
  background-color: var(--primary);
}

.error {
  color: red;
}


================================================
File: /frontend/src/app/app.component.css
================================================
nav {
  display: flex;
  justify-content: space-between;
  height: 2rem;
}

nav button {
  border: 1px solid var(--black);
  background-color: var(--white);
  color: var(--black);
}

nav div {
  display: flex;
  gap: 0.5rem;
  align-items: center;
}

nav div img {
  height: 2rem;
  aspect-ratio: 1 / 1;
  border: 1px solid var(--black);
}


================================================
File: /frontend/src/app/pipes/filter.pipe.ts
================================================
import { Pipe, PipeTransform } from '@angular/core';

@Pipe({
  name: 'filter',
  standalone: true,
})
export class FilterPipe implements PipeTransform {
  transform(items: any[], criteria: any): any[] {
    if (!items || !criteria) {
      return items;
    }
    return items.filter((item) => {
      for (let key in criteria) {
        if (item[key] !== criteria[key]) {
          return false;
        }
      }
      return true;
    });
  }
}


================================================
File: /frontend/src/app/interceptors/auth.interceptor.ts
================================================
import { HttpInterceptorFn } from '@angular/common/http';
import { inject } from '@angular/core';
import { AuthService } from '../services/auth.service';

export const authInterceptor: HttpInterceptorFn = (req, next) => {
  const authService = inject(AuthService);
  const token = authService.getToken();

  if (token) {
    const cloned = req.clone({
      headers: req.headers.set('Authorization', `Bearer ${token}`),
    });
    // console.log('Request with token:', cloned);
    return next(cloned);
  }
  // console.log('Request without token:', req);
  return next(req);
};


================================================
File: /frontend/src/app/guards/auth.guard.ts
================================================
// src/app/guards/auth.guard.ts
import { inject } from '@angular/core';
import { Router } from '@angular/router';
import { AuthService } from '../services/auth.service';
import { tap } from 'rxjs';

export const authGuard = () => {
  const authService = inject(AuthService);
  const router = inject(Router);

  return authService.isAuthenticated$.pipe(
    tap((isAuthenticated) => {
      if (!isAuthenticated) {
        router.navigate(['/login']);
      }
    })
  );
};


================================================
File: /frontend/src/app/app.component.ts
================================================
import { Component, inject, ChangeDetectorRef } from '@angular/core';
import { RouterOutlet } from '@angular/router';
import { HttpClientModule } from '@angular/common/http';
import { AsyncPipe, NgIf } from '@angular/common';
import { AuthService } from './services/auth.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [RouterOutlet, HttpClientModule, AsyncPipe, NgIf],
  template: `
    <header>
      <nav>
        <svg
          id="b"
          data-name="Calque 2"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 1075.71 579.23"
        >
          <g id="c" data-name="Calque 1">
            <g>
              <path
                class="d"
                d="m82.75,165.5v248.24h165.5v82.75H82.75v82.75H0V0h82.75v82.75h165.5v82.75H82.75Zm165.5,82.75v-82.75h165.5v82.75h-165.5Zm165.5,165.5h-165.5v-82.75h165.5v82.75Zm82.75-165.5v82.75h-82.75v-82.75h82.75Z"
              />
              <path
                class="d"
                d="m1075.71,248.24v82.75h-82.75v82.75h-165.5v82.75h-165.5v82.75h-82.75V0h82.75v82.75h165.5v82.75h165.5v82.75h82.75Z"
              />
            </g>
          </g>
        </svg>
        <div *ngIf="authService.isAuthenticated$ | async">
          <span *ngIf="userInfo">Welcome {{ userInfo.firstname }}!</span>
          <img
            *ngIf="userInfo?.avatar"
            [src]="'http://localhost:5038/' + userInfo.avatar"
            alt="Avatar"
          />
          <button (click)="logout()">LOGOUT</button>
        </div>
      </nav>
    </header>
    <router-outlet></router-outlet>
  `,
  styleUrls: ['./app.component.css'],
})
export class AppComponent {
  authService = inject(AuthService);
  router = inject(Router);
  userInfo = this.authService.getUserInfo();
  private cdr = inject(ChangeDetectorRef);

  constructor() {
    this.authService.isAuthenticated$.subscribe(() => {
      this.userInfo = this.authService.getUserInfo();
      this.cdr.markForCheck();
    });

    this.authService.userInfoUpdated.subscribe(() => {
      this.userInfo = this.authService.getUserInfo();
      this.cdr.markForCheck();
    });
  }

  logout() {
    this.authService.logout();
    this.router.navigate(['/login']);
  }
}


================================================
File: /frontend/.editorconfig
================================================
# Editor configuration, see https://editorconfig.org
root = true

[*]
charset = utf-8
indent_style = space
indent_size = 2
insert_final_newline = true
trim_trailing_whitespace = true

[*.ts]
quote_type = single

[*.md]
max_line_length = off
trim_trailing_whitespace = false


================================================
File: /frontend/angular.json
================================================
{
  "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
  "version": 1,
  "newProjectRoot": "projects",
  "projects": {
    "todo-app": {
      "projectType": "application",
      "schematics": {},
      "root": "",
      "sourceRoot": "src",
      "prefix": "app",
      "architect": {
        "build": {
          "builder": "@angular-devkit/build-angular:application",
          "options": {
            "outputPath": "dist/todo-app",
            "index": "src/index.html",
            "browser": "src/main.ts",
            "polyfills": [
              "zone.js"
            ],
            "tsConfig": "tsconfig.app.json",
            "assets": [
              "src/favicon.ico",
              "src/assets"
            ],
            "styles": [
              "src/styles.css"
            ],
            "scripts": []
          },
          "configurations": {
            "production": {
              "budgets": [
                {
                  "type": "initial",
                  "maximumWarning": "500kb",
                  "maximumError": "1mb"
                },
                {
                  "type": "anyComponentStyle",
                  "maximumWarning": "2kb",
                  "maximumError": "4kb"
                }
              ],
              "outputHashing": "all"
            },
            "development": {
              "optimization": false,
              "extractLicenses": false,
              "sourceMap": true
            }
          },
          "defaultConfiguration": "production"
        },
        "serve": {
          "builder": "@angular-devkit/build-angular:dev-server",
          "configurations": {
            "production": {
              "buildTarget": "todo-app:build:production"
            },
            "development": {
              "buildTarget": "todo-app:build:development"
            }
          },
          "defaultConfiguration": "development"
        },
        "extract-i18n": {
          "builder": "@angular-devkit/build-angular:extract-i18n",
          "options": {
            "buildTarget": "todo-app:build"
          }
        },
        "test": {
          "builder": "@angular-devkit/build-angular:karma",
          "options": {
            "polyfills": [
              "zone.js",
              "zone.js/testing"
            ],
            "tsConfig": "tsconfig.spec.json",
            "assets": [
              "src/favicon.ico",
              "src/assets"
            ],
            "styles": [
              "src/styles.css"
            ],
            "scripts": []
          }
        }
      }
    }
  }
}


================================================
File: /.dockerignore
================================================
node_modules
dist
.git
.vscode
*.log

================================================
File: /docker-compose.yml
================================================
services:
  backend:
    build:
      context: ./backend
    ports:
      - "5038:5038"
    environment:
      - NODE_ENV=production
    env_file:
      - .env
    volumes:
      - ./backend:/usr/src/app
      - /usr/src/app/node_modules

  frontend:
    build:
      context: ./frontend
      args:
        - NODE_ENV=production
    ports:
      - "4200:4200"
    depends_on:
      - backend
    volumes:
      - ./frontend:/usr/src/app
      - /usr/src/app/node_modules
    deploy:
      resources:
        limits:
          memory: 2G


